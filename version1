import tkinter as tk
from tkinter import messagebox
from tkinter import ttk

datos_trabajadores = []

def abrir_datos_trabajador():
    ventana_datos = tk.Toplevel()
    ventana_datos.title("Registro de asistencia para el hospital")
    ventana_datos.geometry("400x550")
    ventana_datos.config(bg="lightgreen")

    tk.Label(ventana_datos, text="Datos del trabajador", font=("Times New Roman", 14), bg="lightgreen").pack(pady=10, fill="x")

    def campo(label_text):
        tk.Label(ventana_datos, text=label_text, bg="lightpink").pack()
        entrada = tk.Entry(ventana_datos)
        entrada.pack()
        return entrada

    campo_nombre = campo("Nombre:")
    campo_edad = campo("Edad:")

    tk.Label(ventana_datos, text="Género:", bg="lightpink").pack()
    combo_genero = ttk.Combobox(ventana_datos, values=["Femenino", "Masculino"])
    combo_genero.pack()
    combo_genero.current(0)

    campo_CURP = campo("CURP:")
    campo_NSS = campo("NSS:")
    campo_dom = campo("Domicilio:")
    campo_puesto = campo("Puesto:")

    tk.Label(ventana_datos, text="Turno:", bg="lightpink").pack()
    combo_turno = ttk.Combobox(ventana_datos, values=["Mañana", "Tarde", "Noche"])
    combo_turno.pack()
    combo_turno.current(0)

    def mostrar_info():
        nombre = campo_nombre.get()
        edad = campo_edad.get()
        genero = combo_genero.get()
        curp = campo_CURP.get()
        NSS = campo_NSS.get()
        domicilio = campo_dom.get()
        puesto = campo_puesto.get()
        turno = combo_turno.get()

        datos = {
            "Nombre": nombre,
            "Edad": edad,
            "Género": genero,
            "CURP": curp,
            "NSS": NSS,
            "Domicilio": domicilio,
            "Puesto": puesto,
            "Turno": turno,
            "Vacaciones": "No solicitadas"
        }

        datos_trabajadores.append(datos)
        messagebox.showinfo("Datos registrados", "Los datos se registraron correctamente.")

    tk.Button(ventana_datos, text="Registrar datos", command=mostrar_info).pack(pady=10)

def abrir_solicitud():
    ventana_solicitud = tk.Toplevel()
    ventana_solicitud.title("Solicitud de Vacaciones")
    ventana_solicitud.geometry("350x350")
    ventana_solicitud.config(bg="lightblue")

    tk.Label(ventana_solicitud, text="Solicitud de Vacaciones", font=("Times New Roman", 14), bg="lightblue").pack(pady=10, fill="x")

    def campo(label_text):
        tk.Label(ventana_solicitud, text=label_text, bg="lightpink").pack()
        entrada = tk.Entry(ventana_solicitud)
        entrada.pack()
        return entrada

    entrada_nombre = campo("Nombre:")
    entrada_area = campo("Área:")
    entrada_dias = campo("Días a solicitar:")

    def enviar():
        nombre = entrada_nombre.get().strip()
        area = entrada_area.get().strip()
        try:
            dias = int(entrada_dias.get())
            if dias <= 0:
                raise ValueError

            encontrado = False
            for trabajador in datos_trabajadores:
                if trabajador["Nombre"].strip().lower() == nombre.lower():
                    trabajador["Vacaciones"] = f"Solicitadas - Área: {area}, Días: {dias}"
                    encontrado = True
                    break

            if not encontrado:
                messagebox.showwarning("No encontrado", "Este nombre no está registrado como trabajador.")

            else:
                messagebox.showinfo("Confirmación", f"Solicitud enviada:\nNombre: {nombre}\nÁrea: {area}\nDías: {dias}")

        except ValueError:
            messagebox.showerror("Error", "Por favor ingresa un número válido de días.")

    tk.Button(ventana_solicitud, text="Enviar Solicitud", command=enviar).pack(pady=15)

def abrir_registros():
    ventana_registros = tk.Toplevel()
    ventana_registros.title("Registros de Trabajadores")
    ventana_registros.geometry("480x400")
    ventana_registros.config(bg="lightblue")

    tk.Label(ventana_registros, text="Lista de trabajadores registrados", font=("Arial", 12, "bold"), bg="lightblue").pack(pady=10, fill="x")

    texto = tk.Text(ventana_registros, wrap="word")
    texto.pack(expand=True, fill="both", padx=10, pady=5)

    if datos_trabajadores:
        for i, trabajador in enumerate(datos_trabajadores, 1):
            texto.insert("end", f"Trabajador #{i}:\n")
            for clave, valor in trabajador.items():
                texto.insert("end", f"  {clave}: {valor}\n")
            texto.insert("end", "\n")
    else:
        texto.insert("end", "No hay trabajadores registrados aún.")

ventana_principal = tk.Tk()
ventana_principal.title("Vacaciones Hospital")
ventana_principal.geometry("300x330")
ventana_principal.config(bg="lightpink")

tk.Label(ventana_principal, text="Menú Principal", font=("Arial", 14), bg="lightpink").pack(pady=10)

tk.Button(ventana_principal, text="Datos Trabajador", command=abrir_datos_trabajador, width=20).pack(pady=10)
tk.Button(ventana_principal, text="Solicitar Vacaciones", command=abrir_solicitud, width=20).pack(pady=10)
tk.Button(ventana_principal, text="Ver Registros", command=abrir_registros, width=20).pack(pady=10)
tk.Button(ventana_principal, text="Salir", command=ventana_principal.destroy, width=20).pack(pady=30)

ventana_principal.mainloop()
