import tkinter as tk
from tkinter import messagebox
from tkinter import ttk
from datetime import datetime

datos_trabajadores = []
registro_asistencia = []

def abrir_datos_trabajador():
    ventana_datos = tk.Toplevel()
    ventana_datos.title("Registro de asistencia para el hospital")
    ventana_datos.geometry("400x550")
    ventana_datos.config(bg="Slategray1")

    tk.Label(ventana_datos, text="Datos del trabajador", font=("Times New Roman", 14), bg="white").pack(pady=10, fill="x")

    def campo(label_text):
        tk.Label(ventana_datos, text=label_text, bg="lightgray").pack()
        entrada = tk.Entry(ventana_datos)
        entrada.pack()
        return entrada

    campo_nombre = campo("Nombre:")
    campo_edad = campo("Edad:")

    tk.Label(ventana_datos, text="Género:", bg="lightgray").pack()
    combo_genero = ttk.Combobox(ventana_datos, values=["Femenino", "Masculino"])
    combo_genero.pack()
    combo_genero.current(0)

    campo_CURP = campo("CURP:")
    campo_num_control = campo("Número de control:")
    campo_dom = campo("Domicilio:")
    campo_puesto = campo("Puesto:")

    tk.Label(ventana_datos, text="Turno:", bg="lightgray").pack()
    combo_turno = ttk.Combobox(ventana_datos, values=["Mañana", "Tarde", "Noche"])
    combo_turno.pack()
    combo_turno.current(0)

    def mostrar_info():
        nombre = campo_nombre.get()
        edad = campo_edad.get()
        genero = combo_genero.get()
        curp = campo_CURP.get()
        num_control = campo_num_control.get()
        domicilio = campo_dom.get()
        puesto = campo_puesto.get()
        turno = combo_turno.get()

        if not nombre or not num_control:
            messagebox.showerror("Error", "Nombre y Número de control son obligatorios.")
            return

        datos = {
            "Nombre": nombre,
            "Edad": edad,
            "Género": genero,
            "CURP": curp,
            "Número de control": num_control,
            "Domicilio": domicilio,
            "Puesto": puesto,
            "Turno": turno,
            "Vacaciones": "No solicitadas",
            "Retardos menores": 0,
            "Retardos mayores": 0
        }

        datos_trabajadores.append(datos)
        messagebox.showinfo("Datos registrados", "Los datos se registraron correctamente.")
        ventana_datos.destroy()

    tk.Button(ventana_datos, text="Registrar datos", command=mostrar_info).pack(pady=10)

def abrir_solicitud():
    ventana_solicitud = tk.Toplevel()
    ventana_solicitud.title("Solicitud de Vacaciones")
    ventana_solicitud.geometry("350x350")
    ventana_solicitud.config(bg="Slategray1")

    tk.Label(ventana_solicitud, text="Solicitud de Vacaciones", font=("Times New Roman", 14), bg="white").pack(pady=10, fill="x")

    def campo(label_text):
        tk.Label(ventana_solicitud, text=label_text, bg="lightgray").pack()
        entrada = tk.Entry(ventana_solicitud)
        entrada.pack()
        return entrada

    entrada_nombre = campo("Nombre:")
    entrada_area = campo("Área:")
    entrada_dias = campo("Días a solicitar:")

    def enviar():
        nombre = entrada_nombre.get().strip()
        area = entrada_area.get().strip()
        try:
            dias = int(entrada_dias.get())
            if dias <= 0:
                raise ValueError

            encontrado = False
            for trabajador in datos_trabajadores:
                if trabajador["Nombre"].strip().lower() == nombre.lower():
                    trabajador["Vacaciones"] = f"Solicitadas - Área: {area}, Días: {dias}"
                    encontrado = True
                    break

            if not encontrado:
                messagebox.showwarning("No encontrado", "Este nombre no está registrado como un trabajador")
            else:
                messagebox.showinfo("Confirmación", f"Solicitud enviada:\nNombre: {nombre}\nÁrea: {area}\nDías: {dias}")

        except ValueError:
            messagebox.showerror("Error", "Por favor ingresa un número válido de días.")

    tk.Button(ventana_solicitud, text="Enviar Solicitud", command=enviar).pack(pady=15)

def abrir_registros():
    ventana_registros = tk.Toplevel()
    ventana_registros.title("Registros de Trabajadores")
    ventana_registros.geometry("480x400")
    ventana_registros.config(bg="white")

    tk.Label(ventana_registros, text="Lista de trabajadores registrados", font=("Arial", 12, "bold"), bg="white").pack(pady=10, fill="x")

    texto = tk.Text(ventana_registros, wrap="word")
    texto.pack(expand=True, fill="both", padx=10, pady=5)

    if datos_trabajadores:
        for i, trabajador in enumerate(datos_trabajadores, 1):
            texto.insert("end", f"Trabajador #{i}:\n")
            for clave, valor in trabajador.items():
                texto.insert("end", f"  {clave}: {valor}\n")
            texto.insert("end", "\n")
    else:
        texto.insert("end", "No hay trabajadores registrados aún.")

def abrir_registro_asistencia():
    ventana_asistencia = tk.Toplevel()
    ventana_asistencia.title("Registro de Asistencia")
    ventana_asistencia.geometry("350x300")
    ventana_asistencia.config(bg="Slategray1")

    tk.Label(ventana_asistencia, text="Registro de Asistencia", font=("Times New Roman", 14), bg="white").pack(pady=10, fill="x")

    def campo(label_text):
        tk.Label(ventana_asistencia, text=label_text, bg="lightgray").pack()
        entrada = tk.Entry(ventana_asistencia)
        entrada.pack()
        return entrada

    entrada_num_control = campo("Número de control:")
    entrada_hora = campo("Hora de llegada (HH:MM):")

    tk.Label(ventana_asistencia, text="Turno:", bg="lightgray").pack()
    combo_turno = ttk.Combobox(ventana_asistencia, values=["Mañana", "Tarde", "Noche"])
    combo_turno.pack()
    combo_turno.current(0)

    def registrar():
        num_control = entrada_num_control.get().strip()
        hora_llegada = entrada_hora.get().strip()
        turno = combo_turno.get()

        if not num_control or not hora_llegada:
            messagebox.showerror("Error", "Número de control y hora de llegada son obligatorios.")
            return

        try:
            tiempo_llegada = datetime.strptime(hora_llegada, "%H:%M").time()
        except ValueError:
            messagebox.showerror("Error", "Formato de hora incorrecto. Usa HH:MM (ejemplo 06:45).")
            return

        trabajador_encontrado = None
        for t in datos_trabajadores:
            if t["Número de control"] == num_control:
                trabajador_encontrado = t
                break

        if not trabajador_encontrado:
            messagebox.showerror("Error", "Número de control no registrado.")
            return

        hora_limite = {
            "Mañana": "07:00",
            "Tarde": "14:00",
            "Noche": "20:00"
        }[turno]

        limite = datetime.strptime(hora_limite, "%H:%M").time()
        diferencia = (datetime.combine(datetime.today(), tiempo_llegada) - datetime.combine(datetime.today(), limite)).total_seconds() / 60

        if diferencia <= 0:
            estado = "A tiempo"
        elif diferencia <= 10:
            estado = "Retardo menor"
            trabajador_encontrado["Retardos menores"] += 1
        else:
            estado = "Retardo mayor"
            trabajador_encontrado["Retardos mayores"] += 1

        descuento = 0
        mensaje_descuento = ""

        if trabajador_encontrado["Retardos menores"] > 3:
            descuento += 2000
            mensaje_descuento += "Descuento por retardos menores: $2000\n"

        if trabajador_encontrado["Retardos mayores"] > 2:
            descuento += 5000
            mensaje_descuento += "Descuento por retardos mayores: $5000\n"

        if descuento > 0:
            mensaje_descuento += f"Total descontado: ${descuento}\n"
        else:
            mensaje_descuento = "Sin descuentos aplicados."

        asistencia = {
            "Número de control": num_control,
            "Nombre": trabajador_encontrado["Nombre"],
            "Hora llegada": hora_llegada,
            "Turno": turno,
            "Estado": estado
        }

        registro_asistencia.append(asistencia)

        messagebox.showinfo(
            "Asistencia registrada",
            f"Asistencia registrada para {asistencia['Nombre']}.\nEstado: {estado}\n\n"
            f"Retardos menores: {trabajador_encontrado['Retardos menores']}\n"
            f"Retardos mayores: {trabajador_encontrado['Retardos mayores']}\n\n"
            f"{mensaje_descuento}"
        )
        ventana_asistencia.destroy()

    tk.Button(ventana_asistencia, text="Registrar asistencia", command=registrar).pack(pady=15)

def abrir_registro_asistencia_mostrar():
    ventana_mostrar = tk.Toplevel()
    ventana_mostrar.title("Registros de Asistencia")
    ventana_mostrar.geometry("450x400")
    ventana_mostrar.config(bg="white")

    tk.Label(ventana_mostrar, text="Registros de Asistencia", font=("Arial", 12, "bold"), bg="white").pack(pady=10, fill="x")

    texto = tk.Text(ventana_mostrar, wrap="word")
    texto.pack(expand=True, fill="both", padx=10, pady=5)

    if registro_asistencia:
        for i, reg in enumerate(registro_asistencia, 1):
            texto.insert("end", f"Registro #{i}:\n")
            for clave, valor in reg.items():
                texto.insert("end", f"  {clave}: {valor}\n")
            texto.insert("end", "\n")
    else:
        texto.insert("end", "No hay registros de asistencia.")

ventana_principal = tk.Tk()
ventana_principal.title("Vacaciones Hospital")
ventana_principal.geometry("320x420")
ventana_principal.config(bg="Slategray1")

tk.Label(ventana_principal, text="Menú Principal del\n hospital", font=("Times New Roman", 14), bg="Slategray1").pack(pady=10)

tk.Button(ventana_principal, text="Datos Trabajador", command=abrir_datos_trabajador, width=25).pack(pady=10)
tk.Button(ventana_principal, text="Solicitar Vacaciones", command=abrir_solicitud, width=25).pack(pady=10)
tk.Button(ventana_principal, text="Registrar Asistencia", command=abrir_registro_asistencia, width=25).pack(pady=10)
tk.Button(ventana_principal, text="Ver Registros Trabajadores", command=abrir_registros, width=25).pack(pady=10)
tk.Button(ventana_principal, text="Ver Registros Asistencia", command=abrir_registro_asistencia_mostrar, width=25).pack(pady=10)
tk.Button(ventana_principal, text="Salir", command=ventana_principal.destroy, width=25).pack(pady=15)

ventana_principal.mainloop()
